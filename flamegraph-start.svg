<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="2807462"><g><title>kindelia`&lt;primitive_types::U256 as core::cmp::PartialOrd&gt;::partial_cmp (340 samples, 0.01%)</title><rect x="0.0063%" y="197" width="0.0121%" height="15" fill="rgb(227,0,7)" fg:x="176" fg:w="340"/><text x="0.2563%" y="207.50"></text></g><g><title>kindelia`DYLD-STUB$$pthread_mutex_unlock (994 samples, 0.04%)</title><rect x="0.0285%" y="197" width="0.0354%" height="15" fill="rgb(217,0,24)" fg:x="799" fg:w="994"/><text x="0.2785%" y="207.50"></text></g><g><title>kindelia`kindelia::node::hash_block (323 samples, 0.01%)</title><rect x="0.0639%" y="197" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="1794" fg:w="323"/><text x="0.3139%" y="207.50"></text></g><g><title>kindelia`DYLD-STUB$$free (1,611 samples, 0.06%)</title><rect x="0.3532%" y="181" width="0.0574%" height="15" fill="rgb(248,212,6)" fg:x="9917" fg:w="1611"/><text x="0.6032%" y="191.50"></text></g><g><title>kindelia`DYLD-STUB$$malloc (395 samples, 0.01%)</title><rect x="0.4106%" y="181" width="0.0141%" height="15" fill="rgb(208,68,35)" fg:x="11528" fg:w="395"/><text x="0.6606%" y="191.50"></text></g><g><title>kindelia`DYLD-STUB$$memcpy (724 samples, 0.03%)</title><rect x="0.4247%" y="181" width="0.0258%" height="15" fill="rgb(232,128,0)" fg:x="11923" fg:w="724"/><text x="0.6747%" y="191.50"></text></g><g><title>kindelia`__rdl_alloc (718 samples, 0.03%)</title><rect x="0.4505%" y="181" width="0.0256%" height="15" fill="rgb(207,160,47)" fg:x="12647" fg:w="718"/><text x="0.7005%" y="191.50"></text></g><g><title>kindelia`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4,026 samples, 0.14%)</title><rect x="0.4764%" y="181" width="0.1434%" height="15" fill="rgb(228,23,34)" fg:x="13375" fg:w="4026"/><text x="0.7264%" y="191.50"></text></g><g><title>kindelia`&lt;sha3::Keccak256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (5,119 samples, 0.18%)</title><rect x="1.8878%" y="165" width="0.1823%" height="15" fill="rgb(218,30,26)" fg:x="53000" fg:w="5119"/><text x="2.1378%" y="175.50"></text></g><g><title>kindelia`DYLD-STUB$$bzero (471 samples, 0.02%)</title><rect x="2.0702%" y="165" width="0.0168%" height="15" fill="rgb(220,122,19)" fg:x="58119" fg:w="471"/><text x="2.3202%" y="175.50"></text></g><g><title>kindelia`DYLD-STUB$$memcpy (637 samples, 0.02%)</title><rect x="2.0869%" y="165" width="0.0227%" height="15" fill="rgb(250,228,42)" fg:x="58590" fg:w="637"/><text x="2.3369%" y="175.50"></text></g><g><title>kindelia`DYLD-STUB$$malloc (409 samples, 0.01%)</title><rect x="2.3080%" y="149" width="0.0146%" height="15" fill="rgb(240,193,28)" fg:x="64795" fg:w="409"/><text x="2.5580%" y="159.50"></text></g><g><title>kindelia`DYLD-STUB$$realloc (2,290 samples, 0.08%)</title><rect x="2.3225%" y="149" width="0.0816%" height="15" fill="rgb(216,20,37)" fg:x="65204" fg:w="2290"/><text x="2.5725%" y="159.50"></text></g><g><title>kindelia`__rdl_alloc (672 samples, 0.02%)</title><rect x="2.4041%" y="149" width="0.0239%" height="15" fill="rgb(206,188,39)" fg:x="67494" fg:w="672"/><text x="2.6541%" y="159.50"></text></g><g><title>kindelia`__rdl_realloc (2,208 samples, 0.08%)</title><rect x="2.4280%" y="149" width="0.0786%" height="15" fill="rgb(217,207,13)" fg:x="68166" fg:w="2208"/><text x="2.6780%" y="159.50"></text></g><g><title>kindelia`__rdl_realloc (379 samples, 0.01%)</title><rect x="2.6635%" y="133" width="0.0135%" height="15" fill="rgb(231,73,38)" fg:x="74777" fg:w="379"/><text x="2.9135%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,328 samples, 0.05%)</title><rect x="2.9622%" y="101" width="0.0473%" height="15" fill="rgb(225,20,46)" fg:x="83164" fg:w="1328"/><text x="3.2122%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4,840 samples, 0.17%)</title><rect x="3.2855%" y="85" width="0.1724%" height="15" fill="rgb(210,31,41)" fg:x="92238" fg:w="4840"/><text x="3.5355%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (41,409 samples, 1.47%)</title><rect x="2.8630%" y="117" width="1.4750%" height="15" fill="rgb(221,200,47)" fg:x="80377" fg:w="41409"/><text x="3.1130%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37,294 samples, 1.33%)</title><rect x="3.0096%" y="101" width="1.3284%" height="15" fill="rgb(226,26,5)" fg:x="84492" fg:w="37294"/><text x="3.2596%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24,708 samples, 0.88%)</title><rect x="3.4579%" y="85" width="0.8801%" height="15" fill="rgb(249,33,26)" fg:x="97078" fg:w="24708"/><text x="3.7079%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14,287 samples, 0.51%)</title><rect x="3.8290%" y="69" width="0.5089%" height="15" fill="rgb(235,183,28)" fg:x="107499" fg:w="14287"/><text x="4.0790%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47,552 samples, 1.69%)</title><rect x="2.6770%" y="133" width="1.6938%" height="15" fill="rgb(221,5,38)" fg:x="75156" fg:w="47552"/><text x="2.9270%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (922 samples, 0.03%)</title><rect x="4.3379%" y="117" width="0.0328%" height="15" fill="rgb(247,18,42)" fg:x="121786" fg:w="922"/><text x="4.5879%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1,325 samples, 0.05%)</title><rect x="4.3708%" y="133" width="0.0472%" height="15" fill="rgb(241,131,45)" fg:x="122708" fg:w="1325"/><text x="4.6208%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,159 samples, 0.04%)</title><rect x="4.4180%" y="133" width="0.0413%" height="15" fill="rgb(249,31,29)" fg:x="124033" fg:w="1159"/><text x="4.6680%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2,615 samples, 0.09%)</title><rect x="4.9133%" y="117" width="0.0931%" height="15" fill="rgb(225,111,53)" fg:x="137938" fg:w="2615"/><text x="5.1633%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (984 samples, 0.04%)</title><rect x="5.3417%" y="101" width="0.0350%" height="15" fill="rgb(238,160,17)" fg:x="149965" fg:w="984"/><text x="5.5917%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (660 samples, 0.02%)</title><rect x="5.3767%" y="101" width="0.0235%" height="15" fill="rgb(214,148,48)" fg:x="150949" fg:w="660"/><text x="5.6267%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (712 samples, 0.03%)</title><rect x="5.4002%" y="101" width="0.0254%" height="15" fill="rgb(232,36,49)" fg:x="151609" fg:w="712"/><text x="5.6502%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1,667 samples, 0.06%)</title><rect x="5.4256%" y="101" width="0.0594%" height="15" fill="rgb(209,103,24)" fg:x="152321" fg:w="1667"/><text x="5.6756%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (797 samples, 0.03%)</title><rect x="5.4850%" y="101" width="0.0284%" height="15" fill="rgb(229,88,8)" fg:x="153988" fg:w="797"/><text x="5.7350%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8,601 samples, 0.31%)</title><rect x="6.6876%" y="53" width="0.3064%" height="15" fill="rgb(213,181,19)" fg:x="187752" fg:w="8601"/><text x="6.9376%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34,809 samples, 1.24%)</title><rect x="5.8380%" y="85" width="1.2399%" height="15" fill="rgb(254,191,54)" fg:x="163899" fg:w="34809"/><text x="6.0880%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22,626 samples, 0.81%)</title><rect x="6.2719%" y="69" width="0.8059%" height="15" fill="rgb(241,83,37)" fg:x="176082" fg:w="22626"/><text x="6.5219%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2,355 samples, 0.08%)</title><rect x="6.9940%" y="53" width="0.0839%" height="15" fill="rgb(233,36,39)" fg:x="196353" fg:w="2355"/><text x="7.2440%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1,718 samples, 0.06%)</title><rect x="7.0779%" y="85" width="0.0612%" height="15" fill="rgb(226,3,54)" fg:x="198708" fg:w="1718"/><text x="7.3279%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (285 samples, 0.01%)</title><rect x="7.1390%" y="85" width="0.0102%" height="15" fill="rgb(245,192,40)" fg:x="200426" fg:w="285"/><text x="7.3890%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (3,653 samples, 0.13%)</title><rect x="7.1492%" y="85" width="0.1301%" height="15" fill="rgb(238,167,29)" fg:x="200711" fg:w="3653"/><text x="7.3992%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3,834 samples, 0.14%)</title><rect x="7.3864%" y="69" width="0.1366%" height="15" fill="rgb(232,182,51)" fg:x="207369" fg:w="3834"/><text x="7.6364%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (424 samples, 0.02%)</title><rect x="7.5229%" y="69" width="0.0151%" height="15" fill="rgb(231,60,39)" fg:x="211203" fg:w="424"/><text x="7.7729%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2,204 samples, 0.08%)</title><rect x="7.6974%" y="53" width="0.0785%" height="15" fill="rgb(208,69,12)" fg:x="216102" fg:w="2204"/><text x="7.9474%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20,452 samples, 0.73%)</title><rect x="7.2793%" y="85" width="0.7285%" height="15" fill="rgb(235,93,37)" fg:x="204364" fg:w="20452"/><text x="7.5293%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13,189 samples, 0.47%)</title><rect x="7.5380%" y="69" width="0.4698%" height="15" fill="rgb(213,116,39)" fg:x="211627" fg:w="13189"/><text x="7.7880%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6,510 samples, 0.23%)</title><rect x="7.7759%" y="53" width="0.2319%" height="15" fill="rgb(222,207,29)" fg:x="218306" fg:w="6510"/><text x="8.0259%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,638 samples, 0.06%)</title><rect x="7.9495%" y="37" width="0.0583%" height="15" fill="rgb(206,96,30)" fg:x="223178" fg:w="1638"/><text x="8.1995%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12,367 samples, 0.44%)</title><rect x="8.0078%" y="85" width="0.4405%" height="15" fill="rgb(218,138,4)" fg:x="224816" fg:w="12367"/><text x="8.2578%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10,252 samples, 0.37%)</title><rect x="8.0831%" y="69" width="0.3652%" height="15" fill="rgb(250,191,14)" fg:x="226931" fg:w="10252"/><text x="8.3331%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,738 samples, 0.06%)</title><rect x="8.4486%" y="85" width="0.0619%" height="15" fill="rgb(239,60,40)" fg:x="237191" fg:w="1738"/><text x="8.6986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (638 samples, 0.02%)</title><rect x="8.5105%" y="85" width="0.0227%" height="15" fill="rgb(206,27,48)" fg:x="238929" fg:w="638"/><text x="8.7605%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (688 samples, 0.02%)</title><rect x="8.5332%" y="85" width="0.0245%" height="15" fill="rgb(225,35,8)" fg:x="239567" fg:w="688"/><text x="8.7832%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3,496 samples, 0.12%)</title><rect x="8.9161%" y="69" width="0.1245%" height="15" fill="rgb(250,213,24)" fg:x="250315" fg:w="3496"/><text x="9.1661%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (103,034 samples, 3.67%)</title><rect x="5.5133%" y="101" width="3.6700%" height="15" fill="rgb(247,123,22)" fg:x="154785" fg:w="103034"/><text x="5.7633%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (17,564 samples, 0.63%)</title><rect x="8.5577%" y="85" width="0.6256%" height="15" fill="rgb(231,138,38)" fg:x="240255" fg:w="17564"/><text x="8.8077%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4,008 samples, 0.14%)</title><rect x="9.0406%" y="69" width="0.1428%" height="15" fill="rgb(231,145,46)" fg:x="253811" fg:w="4008"/><text x="9.2906%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1,966 samples, 0.07%)</title><rect x="9.1833%" y="101" width="0.0700%" height="15" fill="rgb(251,118,11)" fg:x="257819" fg:w="1966"/><text x="9.4333%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1,001 samples, 0.04%)</title><rect x="9.2534%" y="101" width="0.0357%" height="15" fill="rgb(217,147,25)" fg:x="259785" fg:w="1001"/><text x="9.5034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (122,644 samples, 4.37%)</title><rect x="5.0064%" y="117" width="4.3685%" height="15" fill="rgb(247,81,37)" fg:x="140553" fg:w="122644"/><text x="5.2564%" y="127.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,411 samples, 0.09%)</title><rect x="9.2890%" y="101" width="0.0859%" height="15" fill="rgb(209,12,38)" fg:x="260786" fg:w="2411"/><text x="9.5390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3,823 samples, 0.14%)</title><rect x="9.3749%" y="117" width="0.1362%" height="15" fill="rgb(227,1,9)" fg:x="263197" fg:w="3823"/><text x="9.6249%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (154,975 samples, 5.52%)</title><rect x="4.4593%" y="133" width="5.5201%" height="15" fill="rgb(248,47,43)" fg:x="125192" fg:w="154975"/><text x="4.7093%" y="143.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_size (13,147 samples, 0.47%)</title><rect x="9.5111%" y="117" width="0.4683%" height="15" fill="rgb(221,10,30)" fg:x="267020" fg:w="13147"/><text x="9.7611%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11,464 samples, 0.41%)</title><rect x="9.5710%" y="101" width="0.4083%" height="15" fill="rgb(210,229,1)" fg:x="268703" fg:w="11464"/><text x="9.8210%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (376 samples, 0.01%)</title><rect x="9.9794%" y="133" width="0.0134%" height="15" fill="rgb(222,148,37)" fg:x="280168" fg:w="376"/><text x="10.2294%" y="143.50"></text></g><g><title>kindelia`alloc::raw_vec::finish_grow (212,559 samples, 7.57%)</title><rect x="2.5067%" y="149" width="7.5712%" height="15" fill="rgb(234,67,33)" fg:x="70374" fg:w="212559"/><text x="2.7567%" y="159.50">kindelia`a..</text></g><g><title>libsystem_malloc.dylib`szone_size (2,389 samples, 0.09%)</title><rect x="9.9928%" y="133" width="0.0851%" height="15" fill="rgb(247,98,35)" fg:x="280544" fg:w="2389"/><text x="10.2428%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (909 samples, 0.03%)</title><rect x="10.0779%" y="149" width="0.0324%" height="15" fill="rgb(247,138,52)" fg:x="282933" fg:w="909"/><text x="10.3279%" y="159.50"></text></g><g><title>kindelia`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (227,779 samples, 8.11%)</title><rect x="2.1096%" y="165" width="8.1133%" height="15" fill="rgb(213,79,30)" fg:x="59227" fg:w="227779"/><text x="2.3596%" y="175.50">kindelia`al..</text></g><g><title>libsystem_malloc.dylib`realloc (3,124 samples, 0.11%)</title><rect x="10.1117%" y="149" width="0.1113%" height="15" fill="rgb(246,177,23)" fg:x="283882" fg:w="3124"/><text x="10.3617%" y="159.50"></text></g><g><title>kindelia`alloc::raw_vec::finish_grow (5,874 samples, 0.21%)</title><rect x="10.2230%" y="165" width="0.2092%" height="15" fill="rgb(230,62,27)" fg:x="287006" fg:w="5874"/><text x="10.4730%" y="175.50"></text></g><g><title>kindelia`keccak::f1600 (2,252,713 samples, 80.24%)</title><rect x="10.4322%" y="165" width="80.2402%" height="15" fill="rgb(216,154,8)" fg:x="292880" fg:w="2252713"/><text x="10.6822%" y="175.50">kindelia`keccak::f1600</text></g><g><title>kindelia`primitive_types::U256::from_little_endian (1,255 samples, 0.04%)</title><rect x="90.6724%" y="165" width="0.0447%" height="15" fill="rgb(244,35,45)" fg:x="2545593" fg:w="1255"/><text x="90.9224%" y="175.50"></text></g><g><title>kindelia`sha3::Keccak256Full::absorb (32,441 samples, 1.16%)</title><rect x="90.7171%" y="165" width="1.1555%" height="15" fill="rgb(251,115,12)" fg:x="2546848" fg:w="32441"/><text x="90.9671%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (878 samples, 0.03%)</title><rect x="92.1065%" y="133" width="0.0313%" height="15" fill="rgb(240,54,50)" fg:x="2585856" fg:w="878"/><text x="92.3565%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14,309 samples, 0.51%)</title><rect x="92.0355%" y="149" width="0.5097%" height="15" fill="rgb(233,84,52)" fg:x="2583862" fg:w="14309"/><text x="92.2855%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11,437 samples, 0.41%)</title><rect x="92.1378%" y="133" width="0.4074%" height="15" fill="rgb(207,117,47)" fg:x="2586734" fg:w="11437"/><text x="92.3878%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3,858 samples, 0.14%)</title><rect x="92.4078%" y="117" width="0.1374%" height="15" fill="rgb(249,43,39)" fg:x="2594313" fg:w="3858"/><text x="92.6578%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19,977 samples, 0.71%)</title><rect x="91.8726%" y="165" width="0.7116%" height="15" fill="rgb(209,38,44)" fg:x="2579289" fg:w="19977"/><text x="92.1226%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,095 samples, 0.04%)</title><rect x="92.5452%" y="149" width="0.0390%" height="15" fill="rgb(236,212,23)" fg:x="2598171" fg:w="1095"/><text x="92.7952%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1,337 samples, 0.05%)</title><rect x="92.5842%" y="165" width="0.0476%" height="15" fill="rgb(242,79,21)" fg:x="2599266" fg:w="1337"/><text x="92.8342%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1,685 samples, 0.06%)</title><rect x="93.2540%" y="149" width="0.0600%" height="15" fill="rgb(211,96,35)" fg:x="2618071" fg:w="1685"/><text x="93.5040%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12,476 samples, 0.44%)</title><rect x="93.3140%" y="149" width="0.4444%" height="15" fill="rgb(253,215,40)" fg:x="2619756" fg:w="12476"/><text x="93.5640%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9,306 samples, 0.33%)</title><rect x="93.4269%" y="133" width="0.3315%" height="15" fill="rgb(211,81,21)" fg:x="2622926" fg:w="9306"/><text x="93.6769%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (31,645 samples, 1.13%)</title><rect x="92.6318%" y="165" width="1.1272%" height="15" fill="rgb(208,190,38)" fg:x="2600603" fg:w="31645"/><text x="92.8818%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2,915 samples, 0.10%)</title><rect x="93.7590%" y="165" width="0.1038%" height="15" fill="rgb(235,213,38)" fg:x="2632248" fg:w="2915"/><text x="94.0090%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8,930 samples, 0.32%)</title><rect x="94.6515%" y="133" width="0.3181%" height="15" fill="rgb(237,122,38)" fg:x="2657306" fg:w="8930"/><text x="94.9015%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (33,868 samples, 1.21%)</title><rect x="93.8628%" y="165" width="1.2064%" height="15" fill="rgb(244,218,35)" fg:x="2635163" fg:w="33868"/><text x="94.1128%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22,486 samples, 0.80%)</title><rect x="94.2682%" y="149" width="0.8009%" height="15" fill="rgb(240,68,47)" fg:x="2646545" fg:w="22486"/><text x="94.5182%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2,795 samples, 0.10%)</title><rect x="94.9696%" y="133" width="0.0996%" height="15" fill="rgb(210,16,53)" fg:x="2666236" fg:w="2795"/><text x="95.2196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (3,964 samples, 0.14%)</title><rect x="95.0692%" y="165" width="0.1412%" height="15" fill="rgb(235,124,12)" fg:x="2669031" fg:w="3964"/><text x="95.3192%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (533 samples, 0.02%)</title><rect x="95.2104%" y="165" width="0.0190%" height="15" fill="rgb(224,169,11)" fg:x="2672995" fg:w="533"/><text x="95.4604%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2,448 samples, 0.09%)</title><rect x="95.2294%" y="165" width="0.0872%" height="15" fill="rgb(250,166,2)" fg:x="2673528" fg:w="2448"/><text x="95.4794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,781 samples, 0.10%)</title><rect x="95.3166%" y="165" width="0.0991%" height="15" fill="rgb(242,216,29)" fg:x="2675976" fg:w="2781"/><text x="95.5666%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,171 samples, 0.04%)</title><rect x="95.4156%" y="165" width="0.0417%" height="15" fill="rgb(230,116,27)" fg:x="2678757" fg:w="1171"/><text x="95.6656%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3,087 samples, 0.11%)</title><rect x="95.4573%" y="165" width="0.1100%" height="15" fill="rgb(228,99,48)" fg:x="2679928" fg:w="3087"/><text x="95.7073%" y="175.50"></text></g><g><title>kindelia`kindelia::node::hash_block (2,669,904 samples, 95.10%)</title><rect x="0.6198%" y="181" width="95.1003%" height="15" fill="rgb(253,11,6)" fg:x="17401" fg:w="2669904"/><text x="0.8698%" y="191.50">kindelia`kindelia::node::hash_block</text></g><g><title>libsystem_platform.dylib`_platform_memset (4,290 samples, 0.15%)</title><rect x="95.5673%" y="165" width="0.1528%" height="15" fill="rgb(247,143,39)" fg:x="2683015" fg:w="4290"/><text x="95.8173%" y="175.50"></text></g><g><title>kindelia`primitive_types::U256::from_little_endian (826 samples, 0.03%)</title><rect x="95.7201%" y="181" width="0.0294%" height="15" fill="rgb(236,97,10)" fg:x="2687305" fg:w="826"/><text x="95.9701%" y="191.50"></text></g><g><title>kindelia`sha3::Keccak256Full::absorb (929 samples, 0.03%)</title><rect x="95.7496%" y="181" width="0.0331%" height="15" fill="rgb(233,208,19)" fg:x="2688133" fg:w="929"/><text x="95.9996%" y="191.50"></text></g><g><title>libsystem_c.dylib`gettimeofday (447 samples, 0.02%)</title><rect x="95.7827%" y="165" width="0.0159%" height="15" fill="rgb(216,164,2)" fg:x="2689063" fg:w="447"/><text x="96.0327%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (444 samples, 0.02%)</title><rect x="95.7828%" y="149" width="0.0158%" height="15" fill="rgb(220,129,5)" fg:x="2689066" fg:w="444"/><text x="96.0328%" y="159.50"></text></g><g><title>kindelia`std::time::SystemTime::now (450 samples, 0.02%)</title><rect x="95.7827%" y="181" width="0.0160%" height="15" fill="rgb(242,17,10)" fg:x="2689063" fg:w="450"/><text x="96.0327%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,000 samples, 0.04%)</title><rect x="95.7991%" y="181" width="0.0356%" height="15" fill="rgb(242,107,0)" fg:x="2689522" fg:w="1000"/><text x="96.0491%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2,705 samples, 0.10%)</title><rect x="95.8347%" y="181" width="0.0964%" height="15" fill="rgb(251,28,31)" fg:x="2690522" fg:w="2705"/><text x="96.0847%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (4,479 samples, 0.16%)</title><rect x="95.9310%" y="181" width="0.1595%" height="15" fill="rgb(233,223,10)" fg:x="2693227" fg:w="4479"/><text x="96.1810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (624 samples, 0.02%)</title><rect x="96.1001%" y="181" width="0.0222%" height="15" fill="rgb(215,21,27)" fg:x="2697975" fg:w="624"/><text x="96.3501%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1,810 samples, 0.06%)</title><rect x="96.1224%" y="181" width="0.0645%" height="15" fill="rgb(232,23,21)" fg:x="2698599" fg:w="1810"/><text x="96.3724%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25,028 samples, 0.89%)</title><rect x="96.1868%" y="181" width="0.8915%" height="15" fill="rgb(244,5,23)" fg:x="2700409" fg:w="25028"/><text x="96.4368%" y="191.50"></text></g><g><title>kindelia`kindelia::node::miner_loop (2,728,697 samples, 97.19%)</title><rect x="0.0754%" y="197" width="97.1944%" height="15" fill="rgb(226,81,46)" fg:x="2117" fg:w="2728697"/><text x="0.3254%" y="207.50">kindelia`kindelia::node::miner_loop</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5,225 samples, 0.19%)</title><rect x="97.0837%" y="181" width="0.1861%" height="15" fill="rgb(247,70,30)" fg:x="2725589" fg:w="5225"/><text x="97.3337%" y="191.50"></text></g><g><title>kindelia`kindelia::bits::deserialized_message (529 samples, 0.02%)</title><rect x="97.2704%" y="181" width="0.0188%" height="15" fill="rgb(212,68,19)" fg:x="2730830" fg:w="529"/><text x="97.5204%" y="191.50"></text></g><g><title>kindelia`kindelia::bits::deserialize_fixlen (495 samples, 0.02%)</title><rect x="97.2716%" y="165" width="0.0176%" height="15" fill="rgb(240,187,13)" fg:x="2730864" fg:w="495"/><text x="97.5216%" y="175.50"></text></g><g><title>kindelia`&lt;primitive_types::U256 as core::ops::arith::Mul&gt;::mul (289 samples, 0.01%)</title><rect x="97.2790%" y="149" width="0.0103%" height="15" fill="rgb(223,113,26)" fg:x="2731070" fg:w="289"/><text x="97.5290%" y="159.50"></text></g><g><title>kindelia`kindelia::node::node_add_block (361 samples, 0.01%)</title><rect x="97.2894%" y="181" width="0.0129%" height="15" fill="rgb(206,192,2)" fg:x="2731362" fg:w="361"/><text x="97.5394%" y="191.50"></text></g><g><title>kindelia`kindelia::bits::serialized_message (504 samples, 0.02%)</title><rect x="97.3102%" y="149" width="0.0180%" height="15" fill="rgb(241,108,4)" fg:x="2731947" fg:w="504"/><text x="97.5602%" y="159.50"></text></g><g><title>kindelia`kindelia::node::udp_send (781 samples, 0.03%)</title><rect x="97.3022%" y="165" width="0.0278%" height="15" fill="rgb(247,173,49)" fg:x="2731723" fg:w="781"/><text x="97.5522%" y="175.50"></text></g><g><title>kindelia`kindelia::node::node_send_block_to (782 samples, 0.03%)</title><rect x="97.3022%" y="181" width="0.0279%" height="15" fill="rgb(224,114,35)" fg:x="2731723" fg:w="782"/><text x="97.5522%" y="191.50"></text></g><g><title>kindelia`kindelia::node::node_loop (1,846 samples, 0.07%)</title><rect x="97.2698%" y="197" width="0.0658%" height="15" fill="rgb(245,159,27)" fg:x="2730814" fg:w="1846"/><text x="97.5198%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (65,264 samples, 2.32%)</title><rect x="97.3363%" y="197" width="2.3247%" height="15" fill="rgb(245,172,44)" fg:x="2732679" fg:w="65264"/><text x="97.5863%" y="207.50">l..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9,517 samples, 0.34%)</title><rect x="99.6609%" y="197" width="0.3390%" height="15" fill="rgb(236,23,11)" fg:x="2797943" fg:w="9517"/><text x="99.9109%" y="207.50"></text></g><g><title>kindelia`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,807,286 samples, 99.99%)</title><rect x="0.0062%" y="229" width="99.9937%" height="15" fill="rgb(205,117,38)" fg:x="175" fg:w="2807286"/><text x="0.2562%" y="239.50">kindelia`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kindelia`std::sys_common::backtrace::__rust_begin_short_backtrace (2,807,285 samples, 99.99%)</title><rect x="0.0063%" y="213" width="99.9937%" height="15" fill="rgb(237,72,25)" fg:x="176" fg:w="2807285"/><text x="0.2563%" y="223.50">kindelia`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (2,807,462 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="2807462"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2,807,287 samples, 99.99%)</title><rect x="0.0062%" y="277" width="99.9938%" height="15" fill="rgb(217,125,39)" fg:x="175" fg:w="2807287"/><text x="0.2562%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (2,807,287 samples, 99.99%)</title><rect x="0.0062%" y="261" width="99.9938%" height="15" fill="rgb(235,36,10)" fg:x="175" fg:w="2807287"/><text x="0.2562%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>kindelia`std::sys::unix::thread::Thread::new::thread_start (2,807,287 samples, 99.99%)</title><rect x="0.0062%" y="245" width="99.9938%" height="15" fill="rgb(251,123,47)" fg:x="175" fg:w="2807287"/><text x="0.2562%" y="255.50">kindelia`std::sys::unix::thread::Thread::new::thread_start</text></g></svg></svg>